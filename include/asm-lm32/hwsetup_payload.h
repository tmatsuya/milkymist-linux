/*
 * (C) Copyright 2007
 *     Theobroma Systems  <www.theobroma-systems.com>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */
#ifndef _ASM_LM32_HARDWARESETUP_H
#define _ASM_LM32_HARDWARESETUP_H

#include <linux/types.h>

/*
 * This file defines the LM32 Hardware Setup Payload structs.
 *
 * The actual configuration is done in hwsetup.c which uses the
 * generated header file hwsetup_generated.h which initialises the
 * payload structs. This header is generated by the MSBConfigParser
 * tool.
 */

#define LM32TAG_MAX_IDENTIFIER_LENGTH	32

/*
 * CPU
 */
typedef struct LM32Tag_CPU
{
	/* Instance Name */
	char name[LM32TAG_MAX_IDENTIFIER_LENGTH];
	/* CPU Frequency */
	u32 frequency;
} LM32Tag_CPU_t;

/*
 * Asynchronous SRAM
 */
typedef struct LM32Tag_ASRAM
{
	/* Instance Name */
	char name[LM32TAG_MAX_IDENTIFIER_LENGTH];
	/* Base Address */
	u32 addr;
	/* Memory Size */
	u32 size;
	/* Read Latency */
	u8 read_latency;
	/* Write Latency */
	u8 write_latency;
	/* Address Width */
	u8 address_width;
	/* Data Width */
	u8 data_width;
} LM32Tag_ASRAM_t;

/*
 * Flash Memory
 */
typedef struct LM32Tag_ASRAM LM32Tag_Flash_t;

/*
 * SDRAM
 */
typedef struct LM32Tag_SDRAM
{
	/* Instance Name */
	char name[LM32TAG_MAX_IDENTIFIER_LENGTH];
	/* Base Address */
	u32 addr;
	/* Memory Size */
	u32 size;
} LM32Tag_SDRAM_t;

/*
 * On-Chip Memory
 */
typedef struct LM32Tag_SDRAM LM32Tag_OCM_t;

/*
 * DDR SDRAM
 */
typedef struct LM32Tag_SDRAM LM32Tag_DDR_SDRAM_t;

/*
 * DDR2 SDRAM
 */
typedef struct LM32Tag_SDRAM LM32Tag_DDR2_SDRAM_t;

/*
 * Timer
 */
typedef struct LM32Tag_Timer
{
	/* Instance Name */
	char name[LM32TAG_MAX_IDENTIFIER_LENGTH];
	/* Base Address */
	u32 addr;
	/* Writeable Tick Count (Flag) */
	u8 wr_tickcount;
	/* Readable Tick Count (Flag) */
	u8 rd_tickcount;
	/* Start Stop Control (Flag) */
	u8 start_stop_control;
	/* Counter Width (Bits) */
	u8 counter_width;
	/* Default Reload Tick */
	u32 reload_ticks;
	/* IRQ */
	u8 irq;
	/* reserved and for alignment */
	u8 reserved0;
	/* reserved and for alignment */
	u8 reserved1;
	/* reserved and for alignment */
	u8 reserved2;
} LM32Tag_Timer_t;

/*
 * UART
 */
typedef struct LM32Tag_UART
{
	/* Instance Name */
	char name[LM32TAG_MAX_IDENTIFIER_LENGTH];
	/* Base Address */
	u32 addr;
	/* Baud Rate */
	u32 baudrate;
	/* Data Bits */
	u8 databits;
	/* Stop Bits */
	u8 stopbits;
	/* Use Interrupt (Flag) */
	u8 use_interrupt;
	/* Block on Transmit (Flag) */
	u8 block_on_transmit;
	/* Block on Receive (Flag) */
	u8 block_on_receive;
	/* Rx Buffer Size */
	u8 rx_buffer_size;
	/* Tx Buffer Size */
	u8 tx_buffer_size;
	/* IRQ */
	u8 irq;
} LM32Tag_UART_t;

/*
 * GPIO Constants
 */
enum {
	/*
	 * GPIO Port Types
	 */

	/* Port Type = output: width is stored in data_width */
	LM32TAG_GPIO_PORT_OUTPUT = 0x1,
	/* Port Type = input: width is stored in data_width */
	LM32TAG_GPIO_PORT_INPUT = 0x2,
	/* Port Type = tristate: width is stored in data_width */
	LM32TAG_GPIO_PORT_TRISTATE = 0x3,
	/* Port Type = input and output: the width is
	 * stored in input_width and output_width */
	LM32TAG_GPIO_PORT_INPUTOUTPUT = 0x4,

	/*
	 * GPIO IRQ Modes
	 */

	/* IRQ Mode = level: edge_response field unused */
	LM32TAG_GPIO_IRQMODE_LEVEL = 0x5,
	/* IRQ Mode = edge: edge_response field determines edge mode */
	LM32TAG_GPIO_IRQMODE_EDGE = 0x6,

	/*
	 * GPIO Edge Responses
	 */

	/* Edge Response = Positive Edge */
	LM32TAG_GPIO_EDGERESPONSE_POS = 0x7,
	/* Edge Response = Negative Edge */
	LM32TAG_GPIO_EDGERESPONSE_NEG = 0x8,
	/* Edge Response = Either Edge = Both Edges */
	LM32TAG_GPIO_EDGERESPONSE_BOTH = 0x9
};

typedef struct LM32Tag_GPIO
{
	/* Instance Name */
	char name[LM32TAG_MAX_IDENTIFIER_LENGTH];
	/* Base Address */
	u32 addr;
	/* Port Types: one of LM32TAG_GPIO_PORT_... */
	u32 port_types;
	/* IRQ Mode: one of LM32TAG_GPIO_IRQMODE_... */
	u32 irqmode;
	/* IRQ Mode Edge Response: one of
	 * LM32TAG_GPIO_EDGERESPONSE_... */
	u32 edge_response;
	/* Data Width */
	u8 width_data;
	/* Input Width */
	u8 width_input;
	/* Output Width */
	u8 width_output;
	/* IRQ Mode in use (Flag) */
	u8 irq;
} LM32Tag_GPIO_t;

/*
 * Leds on GPIO
 */
typedef struct LM32Tag_GPIO LM32Tag_LEDS_t;

/*
 * 7-Segment Display on GPIO
 */
typedef struct LM32Tag_GPIO LM32Tag_7SEG_t;

/*
 * Tri Speed Ethernet MAC
 */
typedef struct LM32Tag_TriSpeedMAC
{
	/* Instance Name */
	char name[LM32TAG_MAX_IDENTIFIER_LENGTH];
	/* Base Address */
	u32 addr;
	/* Tx/Rx FIFO Depth */
	u32 fifo_depth;
	/* Use MDIO Interface (Flag) */
	u8 mdio_present;
	/* Include Statistics registers (Flag) */
	u8 stat_regs_present;
	/* irq number */
	u8 irq;
	/* reserved and for alignment */
	u8 reserved0;
} LM32Tag_TriSpeedMAC_t;

/*
 * I2CM (I2C Master Controller)
 */
typedef struct LM32Tag_I2CM
{
	/* Instance Name */
	char name[LM32TAG_MAX_IDENTIFIER_LENGTH];
	/* Base Address */
	u32 addr;
	/* SCL Speed */
	u32 scl_speed;
} LM32Tag_I2CM_t;

/*
 * SPI master or slave
 * Only the typedefs of this struct will be used directly.
 */
struct LM32Tag_SPI
{
	/* Instance Name */
	char name[LM32TAG_MAX_IDENTIFIER_LENGTH];
	/* Base Address */
	u32 addr;
	/* data length */
	u8 data_length;
	/* shift direction (0 = msb first, 1 = lsb first) */
	u8 shift_direction;
	/* phase (0 = leading edge, 1 = trailing edge) */
	u8 phase;
	/* polarity (0 = idle low, 1 = idle high) */
	u8 polarity;
	/* master (0 = slave, 1 = master) */
	u8 master;
	/* number of slaves (only valid for master) */
	u8 num_slaves;
	/* sclk rate (only valid for master) */
	u8 sclk_rate;
	/* tx start delay (only valid for master) */
	u8 tx_start_delay;
	/* clock counter width (only valid for master) */
	u8 clock_counter_width;
	/* tx interframe pause (only valid for master) */
	u8 tx_interframe_pause;
	/* reserved and for alignment */
	u8 reserved0;
	/* reserved and for alignment */
	u8 reserved1;
};

/*
 * SPI Slave
 */
typedef struct LM32Tag_SPI LM32Tag_SPI_S_t;

/*
 * SPI Master
 */
typedef struct LM32Tag_SPI LM32Tag_SPI_M_t;

/*
 * Board configuration
 */
typedef struct bd_config {
	unsigned long	lm32tag_num_cpu;
	LM32Tag_CPU_t	*lm32tag_cpu;
	unsigned long	lm32tag_num_asram;
	LM32Tag_ASRAM_t	*lm32tag_asram;
	unsigned long	lm32tag_num_flash;
	LM32Tag_Flash_t	*lm32tag_flash;
	unsigned long	lm32tag_num_sdram;
	LM32Tag_SDRAM_t	*lm32tag_sdram;
	unsigned long	lm32tag_num_ocm;
	LM32Tag_OCM_t	*lm32tag_ocm;
	unsigned long	lm32tag_num_ddr_sdram;
	LM32Tag_DDR_SDRAM_t	*lm32tag_ddr_sdram;
	unsigned long	lm32tag_num_ddr2_sdram;
	LM32Tag_DDR2_SDRAM_t	*lm32tag_ddr2_sdram;
	unsigned long	lm32tag_num_timer;
	LM32Tag_Timer_t	*lm32tag_timer;
	unsigned long	lm32tag_num_uart;
	LM32Tag_UART_t	*lm32tag_uart;
	unsigned long	lm32tag_num_gpio;
	LM32Tag_GPIO_t	*lm32tag_gpio;
	unsigned long	lm32tag_num_leds;
	LM32Tag_LEDS_t	*lm32tag_leds;
	unsigned long	lm32tag_num_7seg;
	LM32Tag_7SEG_t	*lm32tag_7seg;
	unsigned long	lm32tag_num_trispeedmac;
	LM32Tag_TriSpeedMAC_t	*lm32tag_trispeedmac;
	unsigned long	lm32tag_num_i2cm;
	LM32Tag_I2CM_t	*lm32tag_i2cm;
	unsigned long	lm32tag_num_spi_s;
	LM32Tag_SPI_S_t	*lm32tag_spi_s;
	unsigned long	lm32tag_num_spi_m;
	LM32Tag_SPI_M_t	*lm32tag_spi_m;
} bd_config_t;

#endif
